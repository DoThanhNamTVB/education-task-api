openapi: "3.0.2"
info:
    title: My API - Education task api
    description: _Github repository [Education-task](https://github.com/DoThanhNamTVB/education-task-api)
    contact:
        email: thanhnamtb@gmail.com
    version: "1.0.0"
servers:
    - url: http://localhost:3001/api
tags:
    - name: admin
      description: every thing admin action
    - name: user
      description: every thing user action
    - name: teacher
      description: every thing user-teacher
    - name: student
      description: every thing user-student
paths:
    #admin api
    /admin/register:
        post:
            tags:
                - "admin"
            summary: user register
            description: user register
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                username:
                                    type: string
                                    example: Nguyen Van loi
                                password:
                                    type: string
                                    example: 123456789a
                                role:
                                    type: number
                                    enum: [1, 2, 3]
                                    example: 2
            responses:
                "200":
                    description: Login successful
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                "401":
                    description: "Unauthorized"

    # /admin/create-account:
    #     post:
    #         tags:
    #             - "admin"
    #         summary: admin create account
    #         requestBody:
    #             content:
    #                 application/json:
    #                     schema:
    #                         type: object
    #                         properties:
    #                             username:
    #                                 type: string
    #                                 example: Nam Do
    #                             password:
    #                                 type: string
    #                                 example: 123456789a
    #                             role:
    #                                 type: number
    #                                 enum: [1, 2, 3]
    #                                 example: 1
    #         responses:
    #             "201":
    #                 description: create account successful
    #                 content:
    #                     application/json:
    #                         schema:
    #                             $ref: "#/components/schemas/User"
    #             "400":
    #                 description: Bad Request
    #             "401":
    #                 description: Unauthorized

    /admin/login:
        post:
            tags:
                - "admin"
                - "user"
                - "teacher"
                - "student"
            summary: "User login"
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                username:
                                    type: string
                                    example: "DoThanhNam"
                                password:
                                    type: string
                                    example: "123456789a"

            responses:
                "201":
                    description: "Login successful"
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    user:
                                        type: object
                                        $ref: "#/components/schemas/User"
                "400":
                    description: "Bad request"
                "401":
                    description: "Unauthorized"
                "500":
                    description: "Server error"

    /admin/{userId}:
        delete:
            tags:
                - "admin"
            summary: remove user
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: "User deleted"
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    user:
                                        type: object
                                        $ref: "#/components/schemas/User"
                "400":
                    description: "Bad request"
                "401":
                    description: "Unauthorized"
                "404":
                    description: "Not found user to delete"
                "500":
                    description: "Server error"
        put:
            tags:
                - "admin"
            summary: unblock user
            parameters:
                - name: userId
                  in: path
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: "User deleted"
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                "400":
                    description: "Bad request"
                "401":
                    description: "Unauthorized"
                "404":
                    description: "Not found user"
                "500":
                    description: "Server error"

    /admin/subject:
        post:
            tags:
                - "admin"
            summary: remove user
            requestBody:
                description: information about subject
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                subjectCode:
                                    type: string
                                    example: 101
                                subjectName:
                                    type: string
                                    example: Maths
            responses:
                "201":
                    description: "User deleted"
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: Subject is created
                                    subject:
                                        type: object
                                        $ref: "#/components/schemas/Subject"
                "400":
                    description: "Bad request / required data"
                "401":
                    description: "Unauthorized"
                "500":
                    description: "Server error"
        delete:
            tags:
                - "admin"
            summary: unblock user
            requestBody:
                description: id of Subject
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                subjectId:
                                    type: string
            responses:
                "200":
                    description: "Subject deleted"
                    content:
                        application/json:
                            schema:
                                properties:
                                    message:
                                        type: string
                                        example: Subject deleted
                                    subject:
                                        $ref: "#/components/schemas/Subject"
                "400":
                    description: "Bad request / data invalid"
                "401":
                    description: "Unauthorized"
                "500":
                    description: "Server error"
        get:
            tags:
                - "admin"
            summary: get all subject
            responses:
                "200":
                    description: "get oke"
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Subject"
                "400":
                    description: "Bad request"
                "401":
                    description: "Unauthorized"
                "500":
                    description: "Server error"

    /all-teacher:
        get:
            summary: Get all teachers
            tags:
                - admin
            description: Retrieve a list of all teachers.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            responses:
                "200":
                    description: A list of teachers
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/User"
                "401":
                    description: Unauthorized

    /all-student:
        get:
            summary: Get all students
            tags:
                - admin
            description: Retrieve a list of all students.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            responses:
                "200":
                    description: A list of students
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/User" # Assuming User schema definition
                "401":
                    description: Unauthorized

    #user api

    /get-user-detail:
        get:
            summary: Get user detail
            tags:
                - user
            description: Retrieve details of the authenticated user.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            responses:
                "200":
                    description: User details retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    user:
                                        $ref: "#/components/schemas/User" # Assuming User schema definition
                "401":
                    description: "Unauthorized"
                "500":
                    description: "Server error"

    /get-all-test:
        get:
            summary: Get all tests
            tags:
                - user
            description: Retrieve a list of all tests.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            responses:
                "200":
                    description: List of tests retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    test:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Test" # Assuming Test schema definition
                "401":
                    description: "Unauthorized"
                "404":
                    description: Tests not found in the database
                "500":
                    description: "Server error"

    /get-test-detail/{testId}:
        get:
            summary: Get test details by ID
            tags:
                - user
            description: Retrieve details of a test by its ID.
            parameters:
                - name: testId
                  in: query
                  description: ID of the test
                  required: true
                  schema:
                      type: string
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            responses:
                "200":
                    description: Test details retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    test:
                                        $ref: "#/components/schemas/Test" # Assuming Test schema definition
                "401":
                    description: Unauthorized
                "404":
                    description: Test not found in the database
                "500":
                    description: "Server error"

    # api teacher

    /add-question-subject:
        post:
            summary: Add a question to a subject
            tags:
                - teacher
            description: Add a question to a subject.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                subjectId:
                                    type: string
                                questionName:
                                    type: string
                                answer:
                                    type: array
                                    items:
                                        type: object
                                        properties:
                                            isTrue:
                                                type: boolean
                                            content:
                                                type: string
                                status:
                                    type: string
            responses:
                "201":
                    description: Question added successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    question:
                                        $ref: "#/components/schemas/Question" # Assuming Question schema definition
                "400":
                    description: Bad request
                "500":
                    description: "Server error"

    /search-question:
        get:
            summary: Search questions
            tags:
                - teacher
            description: Search questions by question name.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            parameters:
                - name: questionName
                  in: query
                  description: Name of the question to search
                  schema:
                      type: string
            responses:
                "200":
                    description: Questions retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    question:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Question" # Assuming Question schema definition
                "400":
                    description: "Bad request"
                "401":
                    description: "Unauthorized"
                "500":
                    description: "Server error"

    /question-action/{questionId}:
        put:
            summary: Update a question
            tags:
                - teacher
            description: Update a question by its ID.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            parameters:
                - name: questionId
                  in: path
                  description: ID of the question to update
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                subjectId:
                                    type: string
                                questionName:
                                    type: string
                                answer:
                                    type: array
                                    items:
                                        type: object
                                        properties:
                                            isTrue:
                                                type: boolean
                                            content:
                                                type: string
                                status:
                                    type: string
            responses:
                "200":
                    description: Question updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    question:
                                        $ref: "#/components/schemas/Question" # Assuming Question schema definition
                "400":
                    description: Bad request
                "401":
                    description: "Unauthorized"
                "404":
                    description: Question not found
                "500":
                    description: "Server error"

        delete:
            summary: Delete a question
            tags:
                - teacher
            description: Delete a question by its ID.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            parameters:
                - name: questionId
                  in: path
                  description: ID of the question to delete
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Question deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    questionDeleted:
                                        $ref: "#/components/schemas/Question" # Assuming Question schema definition
                "401":
                    description: "Unauthorized"
                "404":
                    description: Question not found
                "500":
                    description: "Server error"

    /change-status-question:
        put:
            summary: Change the status of a question
            tags:
                - teacher
            description: Change the status of a question by its ID.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                questionId:
                                    type: string
                                status:
                                    type: string
            responses:
                "200":
                    description: Status updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    status:
                                        type: string
                "400":
                    description: Bad request
                "404":
                    description: Question not found

    /create-test:
        post:
            summary: Create a test
            tags:
                - teacher
            description: Create a test.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                testName:
                                    type: string
                                subjectId:
                                    type: string
                                startTime:
                                    type: string
                                endTime:
                                    type: string
                                duringStart:
                                    type: number
                                question:
                                    type: array
                                    items:
                                        type: string # Assuming question IDs
            responses:
                "201":
                    description: Test created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    test:
                                        $ref: "#/components/schemas/Test" # Assuming Test schema definition
                "400":
                    description: Bad request
                "404":
                    description: Subject or question not found

    #student api

    /register-into-test:
        post:
            summary: Register for a test
            tags:
                - student
            description: Register a student for a test.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                testId:
                                    type: string
            responses:
                "201":
                    description: Registration successful
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                "400":
                    description: Bad request
                "404":
                    description: Test not found

    /get-all-test-student:
        get:
            summary: Get all tests for a student
            tags:
                - student
            description: Get all tests registered by a student.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            responses:
                "200":
                    description: Tests retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    test:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Test" # Assuming Test schema definition
                "500":
                    description: Internal Server Error

    /get-up-coming-test:
        get:
            summary: Get upcoming tests for a student
            tags:
                - student
            description: Get upcoming tests for a student.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            responses:
                "200":
                    description: Upcoming tests retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    test:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Test" # Assuming Test schema definition
                "500":
                    description: Internal Server Error

    /start-test:
        put:
            summary: Start a test
            tags:
                - student
            description: Start a test for a student.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                testId:
                                    type: string
            responses:
                "200":
                    description: Test started successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    question:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Question" # Assuming Question schema definition
                "400":
                    description: Bad request
                "404":
                    description: Test not found or not registered

    /to-result-test:
        put:
            summary: Submit test results
            tags:
                - student
            description: Submit test results for a student.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                testId:
                                    type: string
                                idTestStudent:
                                    type: string
                                listAnswer:
                                    type: array
                                    items:
                                        type: object
                                        properties:
                                            questionId:
                                                type: string
                                            selectedAnswer:
                                                type: string
            responses:
                "200":
                    description: Test results submitted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    testId:
                                        type: string
                                    testName:
                                        type: string
                                    duringTime:
                                        type: number
                                    result:
                                        type: number
                "400":
                    description: Bad request
                "404":
                    description: Test not found or not registered

    /get-all-complete-test:
        get:
            summary: Get all completed tests
            tags:
                - student
            description: Retrieve a list of completed tests for a student.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            responses:
                "200":
                    description: Successfully retrieved completed tests
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    test:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Test" # Assuming Test schema definition
                "500":
                    description: Internal Server Error

    /get-result-test/{testId}:
        get:
            summary: Get result for a specific test
            tags:
                - student
            description: Retrieve the result for a specific test for a student.
            security:
                - bearerAuth: [] # Assuming you are using bearer token authentication
            parameters:
                - name: testId
                  in: path
                  description: ID of the test to retrieve the result for
                  required: true
                  schema:
                      type: string
            responses:
                "200":
                    description: Successfully retrieved result for the test
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    result:
                                        type: number
                "404":
                    description: Test not found
                "500":
                    description: Internal Server Error

components:
    schemas:
        User:
            type: object
            required:
                - username
                - password
                - role
            properties:
                _id:
                    type: string
                    format: objectId
                    example: 6560ef8c5c431c72b2428782
                username:
                    type: string
                    example: DoThanhNam
                password:
                    type: string
                    example: $2a$10$ggUNzMfQ0sOe8ex4DsC0Puiup7XR/Ycz1oSSngjlCIITU7v3iQ8t6
                role:
                    type: integer
                    description: "Role admin(0), teacher(1), student(2)"
                    enum: [1, 2, 3]
                status:
                    type: string
                    description: "Status account"
                    enum: ["active", "block"]
                    default: active
        Subject:
            type: "object"
            required:
                - subjectCode
                - subjectName
            properties:
                _id:
                    type: string
                    format: objectId
                subjectCode:
                    type: "number"
                subjectName:
                    type: "string"
        Question:
            type: "object"
            required:
                - _id
                - subjectId
                - questionName
                - status
            properties:
                _id:
                    type: "string"
                    format: objectId
                subjectId:
                    type: "string"
                questionName:
                    type: "string"
                answer:
                    type: "array"
                    items:
                        type: "object"
                        properties:
                            content:
                                type: "string"
                            isTrue:
                                type: "boolean"
                status:
                    type: "string"
                    description: "status of question"
                    enum: ["active", "inactive", "draft"]
                    default: "active"
        Test:
            type: "object"
            properties:
                _id:
                    type: string
                    format: objectId
                testName:
                    type: "string"
                subjectId:
                    type: "string"
                authTest:
                    type: "string"
                student:
                    type: "array"
                    items:
                        type: "object"
                        properties:
                            studentId:
                                type: "string"
                            startTest:
                                type: "string"
                                format: "date-time"
                                description: "time start a test"
                            during:
                                type: "number"
                                description: "during time a test"
                            result:
                                type: "string"
                                description: "result a test"
                            status:
                                type: "string"
                                enum: ["Completed", "Not-complete"]
                                default: "Not-complete"
                                description: "status a test of student"
                status:
                    type: "string"
                    enum:
                        ["Scheduled", "Active", "Completed", "Draft", "Cancel"]
                    description: "Status a test"
                startTime:
                    type: "string"
                    format: "date-time"
                endTime:
                    type: "string"
                    format: "date-time"
                duringStart:
                    type: "number"
                question:
                    type: "array"
                    items:
                        type: "object"
                        properties:
                            questionId:
                                type: "string"
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
